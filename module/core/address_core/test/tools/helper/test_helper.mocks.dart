// Mocks generated by Mockito 5.4.4 from annotations
// in address_core/test/tools/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i15;
import 'dart:typed_data' as _i17;

import 'package:address_core/data/data_sources/address_data_source.dart' as _i6;
import 'package:address_core/data/models/address_detail_model.dart' as _i2;
import 'package:address_core/data/models/address_model.dart' as _i8;
import 'package:address_core/data/models/street_model.dart' as _i9;
import 'package:address_core/domain/entities/address.dart' as _i12;
import 'package:address_core/domain/entities/address_detail.dart' as _i13;
import 'package:address_core/domain/entities/street.dart' as _i14;
import 'package:address_core/domain/repositories/address_repository.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i16;
import 'package:shared_common/failure.dart' as _i11;
import 'package:shared_libraries/dartz/dartz.dart' as _i4;
import 'package:shared_libraries/geolocator/geolocator.dart' as _i3;
import 'package:shared_libraries/http/http.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAddressDetailModel_0 extends _i1.SmartFake
    implements _i2.AddressDetailModel {
  _FakeAddressDetailModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePosition_1 extends _i1.SmartFake implements _i3.Position {
  _FakePosition_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_3 extends _i1.SmartFake implements _i5.Response {
  _FakeResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_4 extends _i1.SmartFake
    implements _i5.StreamedResponse {
  _FakeStreamedResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddressDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddressDataSource extends _i1.Mock implements _i6.AddressDataSource {
  MockAddressDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<bool> createAddress({
    required int? streetId,
    required String? name,
    required String? phone,
    required String? address,
    required String? type,
    required double? latitude,
    required double? longitude,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAddress,
          [],
          {
            #streetId: streetId,
            #name: name,
            #phone: phone,
            #address: address,
            #type: type,
            #latitude: latitude,
            #longitude: longitude,
          },
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> deleteAddress(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteAddress,
          [id],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<List<_i8.AddressModel>> getAddressList() => (super.noSuchMethod(
        Invocation.method(
          #getAddressList,
          [],
        ),
        returnValue:
            _i7.Future<List<_i8.AddressModel>>.value(<_i8.AddressModel>[]),
      ) as _i7.Future<List<_i8.AddressModel>>);

  @override
  _i7.Future<_i2.AddressDetailModel> getAddressDetail(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAddressDetail,
          [id],
        ),
        returnValue:
            _i7.Future<_i2.AddressDetailModel>.value(_FakeAddressDetailModel_0(
          this,
          Invocation.method(
            #getAddressDetail,
            [id],
          ),
        )),
      ) as _i7.Future<_i2.AddressDetailModel>);

  @override
  _i7.Future<_i3.Position> getCurrentPosition() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentPosition,
          [],
        ),
        returnValue: _i7.Future<_i3.Position>.value(_FakePosition_1(
          this,
          Invocation.method(
            #getCurrentPosition,
            [],
          ),
        )),
      ) as _i7.Future<_i3.Position>);

  @override
  _i7.Future<List<_i9.StreetModel>> getStreetList() => (super.noSuchMethod(
        Invocation.method(
          #getStreetList,
          [],
        ),
        returnValue:
            _i7.Future<List<_i9.StreetModel>>.value(<_i9.StreetModel>[]),
      ) as _i7.Future<List<_i9.StreetModel>>);

  @override
  _i7.Future<bool> setDefault(int? id) => (super.noSuchMethod(
        Invocation.method(
          #setDefault,
          [id],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> updateAddress({
    required int? id,
    required int? streetId,
    required String? name,
    required String? phone,
    required String? address,
    required String? type,
    required double? latitude,
    required double? longitude,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAddress,
          [],
          {
            #id: id,
            #streetId: streetId,
            #name: name,
            #phone: phone,
            #address: address,
            #type: type,
            #latitude: latitude,
            #longitude: longitude,
          },
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [AddressRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddressRepository extends _i1.Mock implements _i10.AddressRepository {
  MockAddressRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Either<_i11.Failure, bool>> createAddress({
    required int? streetId,
    required String? name,
    required String? phone,
    required String? address,
    required String? type,
    required double? latitude,
    required double? longitude,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAddress,
          [],
          {
            #streetId: streetId,
            #name: name,
            #phone: phone,
            #address: address,
            #type: type,
            #latitude: latitude,
            #longitude: longitude,
          },
        ),
        returnValue: _i7.Future<_i4.Either<_i11.Failure, bool>>.value(
            _FakeEither_2<_i11.Failure, bool>(
          this,
          Invocation.method(
            #createAddress,
            [],
            {
              #streetId: streetId,
              #name: name,
              #phone: phone,
              #address: address,
              #type: type,
              #latitude: latitude,
              #longitude: longitude,
            },
          ),
        )),
      ) as _i7.Future<_i4.Either<_i11.Failure, bool>>);

  @override
  _i7.Future<_i4.Either<_i11.Failure, bool>> deleteAddress(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAddress,
          [id],
        ),
        returnValue: _i7.Future<_i4.Either<_i11.Failure, bool>>.value(
            _FakeEither_2<_i11.Failure, bool>(
          this,
          Invocation.method(
            #deleteAddress,
            [id],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i11.Failure, bool>>);

  @override
  _i7.Future<_i4.Either<_i11.Failure, List<_i12.Address>>> getAddressList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAddressList,
          [],
        ),
        returnValue:
            _i7.Future<_i4.Either<_i11.Failure, List<_i12.Address>>>.value(
                _FakeEither_2<_i11.Failure, List<_i12.Address>>(
          this,
          Invocation.method(
            #getAddressList,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i11.Failure, List<_i12.Address>>>);

  @override
  _i7.Future<_i4.Either<_i11.Failure, _i13.AddressDetail>> getAddressDetail(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAddressDetail,
          [id],
        ),
        returnValue:
            _i7.Future<_i4.Either<_i11.Failure, _i13.AddressDetail>>.value(
                _FakeEither_2<_i11.Failure, _i13.AddressDetail>(
          this,
          Invocation.method(
            #getAddressDetail,
            [id],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i11.Failure, _i13.AddressDetail>>);

  @override
  _i7.Future<_i4.Either<_i11.Failure, _i3.Position>> getCurrentPosition() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentPosition,
          [],
        ),
        returnValue: _i7.Future<_i4.Either<_i11.Failure, _i3.Position>>.value(
            _FakeEither_2<_i11.Failure, _i3.Position>(
          this,
          Invocation.method(
            #getCurrentPosition,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i11.Failure, _i3.Position>>);

  @override
  _i7.Future<_i4.Either<_i11.Failure, List<_i14.Street>>> getStreetList() =>
      (super.noSuchMethod(
        Invocation.method(
          #getStreetList,
          [],
        ),
        returnValue:
            _i7.Future<_i4.Either<_i11.Failure, List<_i14.Street>>>.value(
                _FakeEither_2<_i11.Failure, List<_i14.Street>>(
          this,
          Invocation.method(
            #getStreetList,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i11.Failure, List<_i14.Street>>>);

  @override
  _i7.Future<_i4.Either<_i11.Failure, bool>> setDefault(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDefault,
          [id],
        ),
        returnValue: _i7.Future<_i4.Either<_i11.Failure, bool>>.value(
            _FakeEither_2<_i11.Failure, bool>(
          this,
          Invocation.method(
            #setDefault,
            [id],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i11.Failure, bool>>);

  @override
  _i7.Future<_i4.Either<_i11.Failure, bool>> updateAddress({
    required int? id,
    required int? streetId,
    required String? name,
    required String? phone,
    required String? address,
    required String? type,
    required double? latitude,
    required double? longitude,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAddress,
          [],
          {
            #id: id,
            #streetId: streetId,
            #name: name,
            #phone: phone,
            #address: address,
            #type: type,
            #latitude: latitude,
            #longitude: longitude,
          },
        ),
        returnValue: _i7.Future<_i4.Either<_i11.Failure, bool>>.value(
            _FakeEither_2<_i11.Failure, bool>(
          this,
          Invocation.method(
            #updateAddress,
            [],
            {
              #id: id,
              #streetId: streetId,
              #name: name,
              #phone: phone,
              #address: address,
              #type: type,
              #latitude: latitude,
              #longitude: longitude,
            },
          ),
        )),
      ) as _i7.Future<_i4.Either<_i11.Failure, bool>>);
}

/// A class which mocks [GeolocatorPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeolocatorPlatform extends _i1.Mock
    implements _i3.GeolocatorPlatform {
  MockGeolocatorPlatform() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.LocationPermission> checkPermission() => (super.noSuchMethod(
        Invocation.method(
          #checkPermission,
          [],
        ),
        returnValue: _i7.Future<_i3.LocationPermission>.value(
            _i3.LocationPermission.denied),
      ) as _i7.Future<_i3.LocationPermission>);

  @override
  _i7.Future<_i3.LocationPermission> requestPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
        ),
        returnValue: _i7.Future<_i3.LocationPermission>.value(
            _i3.LocationPermission.denied),
      ) as _i7.Future<_i3.LocationPermission>);

  @override
  _i7.Future<bool> isLocationServiceEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isLocationServiceEnabled,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<_i3.Position?> getLastKnownPosition(
          {bool? forceLocationManager = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastKnownPosition,
          [],
          {#forceLocationManager: forceLocationManager},
        ),
        returnValue: _i7.Future<_i3.Position?>.value(),
      ) as _i7.Future<_i3.Position?>);

  @override
  _i7.Future<_i3.Position> getCurrentPosition(
          {_i3.LocationSettings? locationSettings}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentPosition,
          [],
          {#locationSettings: locationSettings},
        ),
        returnValue: _i7.Future<_i3.Position>.value(_FakePosition_1(
          this,
          Invocation.method(
            #getCurrentPosition,
            [],
            {#locationSettings: locationSettings},
          ),
        )),
      ) as _i7.Future<_i3.Position>);

  @override
  _i7.Stream<_i3.ServiceStatus> getServiceStatusStream() => (super.noSuchMethod(
        Invocation.method(
          #getServiceStatusStream,
          [],
        ),
        returnValue: _i7.Stream<_i3.ServiceStatus>.empty(),
      ) as _i7.Stream<_i3.ServiceStatus>);

  @override
  _i7.Stream<_i3.Position> getPositionStream(
          {_i3.LocationSettings? locationSettings}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPositionStream,
          [],
          {#locationSettings: locationSettings},
        ),
        returnValue: _i7.Stream<_i3.Position>.empty(),
      ) as _i7.Stream<_i3.Position>);

  @override
  _i7.Future<_i3.LocationAccuracyStatus> requestTemporaryFullAccuracy(
          {required String? purposeKey}) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestTemporaryFullAccuracy,
          [],
          {#purposeKey: purposeKey},
        ),
        returnValue: _i7.Future<_i3.LocationAccuracyStatus>.value(
            _i3.LocationAccuracyStatus.reduced),
      ) as _i7.Future<_i3.LocationAccuracyStatus>);

  @override
  _i7.Future<_i3.LocationAccuracyStatus> getLocationAccuracy() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocationAccuracy,
          [],
        ),
        returnValue: _i7.Future<_i3.LocationAccuracyStatus>.value(
            _i3.LocationAccuracyStatus.reduced),
      ) as _i7.Future<_i3.LocationAccuracyStatus>);

  @override
  _i7.Future<bool> openAppSettings() => (super.noSuchMethod(
        Invocation.method(
          #openAppSettings,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> openLocationSettings() => (super.noSuchMethod(
        Invocation.method(
          #openLocationSettings,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  double distanceBetween(
    double? startLatitude,
    double? startLongitude,
    double? endLatitude,
    double? endLongitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #distanceBetween,
          [
            startLatitude,
            startLongitude,
            endLatitude,
            endLongitude,
          ],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  double bearingBetween(
    double? startLatitude,
    double? startLongitude,
    double? endLatitude,
    double? endLongitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #bearingBetween,
          [
            startLatitude,
            startLongitude,
            endLatitude,
            endLongitude,
          ],
        ),
        returnValue: 0.0,
      ) as double);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i5.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<String>.value(_i16.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<_i17.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i17.Uint8List>.value(_i17.Uint8List(0)),
      ) as _i7.Future<_i17.Uint8List>);

  @override
  _i7.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i7.Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_4(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i7.Future<_i5.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
