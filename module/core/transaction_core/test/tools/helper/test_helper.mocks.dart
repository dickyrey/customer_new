// Mocks generated by Mockito 5.4.4 from annotations
// in transaction_core/test/tools/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i12;
import 'dart:typed_data' as _i14;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i13;
import 'package:shared_common/failure.dart' as _i9;
import 'package:shared_libraries/dartz/dartz.dart' as _i3;
import 'package:shared_libraries/http/http.dart' as _i4;
import 'package:transaction_core/data/data_sources/transaction_data_source.dart'
    as _i5;
import 'package:transaction_core/data/models/transaction_detail_model.dart'
    as _i2;
import 'package:transaction_core/data/models/transaction_model.dart' as _i7;
import 'package:transaction_core/domain/entities/transaction.dart' as _i11;
import 'package:transaction_core/domain/entities/transaction_detail.dart'
    as _i10;
import 'package:transaction_core/domain/repositories/transaction_repository.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTransactionDetailModel_0 extends _i1.SmartFake
    implements _i2.TransactionDetailModel {
  _FakeTransactionDetailModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_2 extends _i1.SmartFake implements _i4.Response {
  _FakeResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_3 extends _i1.SmartFake
    implements _i4.StreamedResponse {
  _FakeStreamedResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TransactionDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionDataSource extends _i1.Mock
    implements _i5.TransactionDataSource {
  MockTransactionDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> cancelTransaction(int? id) => (super.noSuchMethod(
        Invocation.method(
          #cancelTransaction,
          [id],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<_i2.TransactionDetailModel> completeTransaction(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #completeTransaction,
          [id],
        ),
        returnValue: _i6.Future<_i2.TransactionDetailModel>.value(
            _FakeTransactionDetailModel_0(
          this,
          Invocation.method(
            #completeTransaction,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.TransactionDetailModel>);

  @override
  _i6.Future<_i2.TransactionDetailModel> createTransaction({
    required int? addressId,
    required int? paymentId,
    required String? jsonString,
    required bool? isUsePoint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTransaction,
          [],
          {
            #addressId: addressId,
            #paymentId: paymentId,
            #jsonString: jsonString,
            #isUsePoint: isUsePoint,
          },
        ),
        returnValue: _i6.Future<_i2.TransactionDetailModel>.value(
            _FakeTransactionDetailModel_0(
          this,
          Invocation.method(
            #createTransaction,
            [],
            {
              #addressId: addressId,
              #paymentId: paymentId,
              #jsonString: jsonString,
              #isUsePoint: isUsePoint,
            },
          ),
        )),
      ) as _i6.Future<_i2.TransactionDetailModel>);

  @override
  _i6.Future<List<_i7.TransactionModel>> getTransactionList({
    required int? page,
    required String? status,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionList,
          [],
          {
            #page: page,
            #status: status,
          },
        ),
        returnValue: _i6.Future<List<_i7.TransactionModel>>.value(
            <_i7.TransactionModel>[]),
      ) as _i6.Future<List<_i7.TransactionModel>>);

  @override
  _i6.Future<_i2.TransactionDetailModel> getTransactionDetail(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionDetail,
          [id],
        ),
        returnValue: _i6.Future<_i2.TransactionDetailModel>.value(
            _FakeTransactionDetailModel_0(
          this,
          Invocation.method(
            #getTransactionDetail,
            [id],
          ),
        )),
      ) as _i6.Future<_i2.TransactionDetailModel>);

  @override
  _i6.Future<bool> reviewTransaction({
    required int? id,
    required int? rating,
    required String? review,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #reviewTransaction,
          [],
          {
            #id: id,
            #rating: rating,
            #review: review,
          },
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [TransactionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionRepository extends _i1.Mock
    implements _i8.TransactionRepository {
  MockTransactionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Either<_i9.Failure, bool>> cancelTransaction(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelTransaction,
          [id],
        ),
        returnValue: _i6.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #cancelTransaction,
            [id],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i9.Failure, bool>>);

  @override
  _i6.Future<_i3.Either<_i9.Failure, _i10.TransactionDetail>>
      completeTransaction(int? id) => (super.noSuchMethod(
            Invocation.method(
              #completeTransaction,
              [id],
            ),
            returnValue: _i6
                .Future<_i3.Either<_i9.Failure, _i10.TransactionDetail>>.value(
                _FakeEither_1<_i9.Failure, _i10.TransactionDetail>(
              this,
              Invocation.method(
                #completeTransaction,
                [id],
              ),
            )),
          ) as _i6.Future<_i3.Either<_i9.Failure, _i10.TransactionDetail>>);

  @override
  _i6.Future<
      _i3.Either<_i9.Failure, _i10.TransactionDetail>> createTransaction({
    required int? addressId,
    required int? paymentId,
    required String? jsonString,
    required bool? isUsePoint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTransaction,
          [],
          {
            #addressId: addressId,
            #paymentId: paymentId,
            #jsonString: jsonString,
            #isUsePoint: isUsePoint,
          },
        ),
        returnValue:
            _i6.Future<_i3.Either<_i9.Failure, _i10.TransactionDetail>>.value(
                _FakeEither_1<_i9.Failure, _i10.TransactionDetail>(
          this,
          Invocation.method(
            #createTransaction,
            [],
            {
              #addressId: addressId,
              #paymentId: paymentId,
              #jsonString: jsonString,
              #isUsePoint: isUsePoint,
            },
          ),
        )),
      ) as _i6.Future<_i3.Either<_i9.Failure, _i10.TransactionDetail>>);

  @override
  _i6.Future<
      _i3.Either<_i9.Failure, List<_i11.Transaction>>> getTransactionList({
    required int? page,
    required String? status,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionList,
          [],
          {
            #page: page,
            #status: status,
          },
        ),
        returnValue:
            _i6.Future<_i3.Either<_i9.Failure, List<_i11.Transaction>>>.value(
                _FakeEither_1<_i9.Failure, List<_i11.Transaction>>(
          this,
          Invocation.method(
            #getTransactionList,
            [],
            {
              #page: page,
              #status: status,
            },
          ),
        )),
      ) as _i6.Future<_i3.Either<_i9.Failure, List<_i11.Transaction>>>);

  @override
  _i6.Future<_i3.Either<_i9.Failure, _i10.TransactionDetail>>
      getTransactionDetail(int? id) => (super.noSuchMethod(
            Invocation.method(
              #getTransactionDetail,
              [id],
            ),
            returnValue: _i6
                .Future<_i3.Either<_i9.Failure, _i10.TransactionDetail>>.value(
                _FakeEither_1<_i9.Failure, _i10.TransactionDetail>(
              this,
              Invocation.method(
                #getTransactionDetail,
                [id],
              ),
            )),
          ) as _i6.Future<_i3.Either<_i9.Failure, _i10.TransactionDetail>>);

  @override
  _i6.Future<_i3.Either<_i9.Failure, bool>> reviewTransaction({
    required int? id,
    required int? rating,
    required String? review,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #reviewTransaction,
          [],
          {
            #id: id,
            #rating: rating,
            #review: review,
          },
        ),
        returnValue: _i6.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #reviewTransaction,
            [],
            {
              #id: id,
              #rating: rating,
              #review: review,
            },
          ),
        )),
      ) as _i6.Future<_i3.Either<_i9.Failure, bool>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i4.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i4.Response>);

  @override
  _i6.Future<_i4.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i4.Response>);

  @override
  _i6.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<String>.value(_i13.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<_i14.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i14.Uint8List>.value(_i14.Uint8List(0)),
      ) as _i6.Future<_i14.Uint8List>);

  @override
  _i6.Future<_i4.StreamedResponse> send(_i4.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i6.Future<_i4.StreamedResponse>.value(_FakeStreamedResponse_3(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i6.Future<_i4.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
